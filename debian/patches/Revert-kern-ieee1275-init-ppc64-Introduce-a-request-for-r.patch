From: Mate Kukri <mate.kukri@canonical.com>
Date: Tue, 13 Feb 2024 16:23:09 +0000
Subject: Revert "kern/ieee1275/init/ppc64: Introduce a request for
 regions_claim()"

This reverts commit 0bb59fa9a3190e785be683bf1081287a78273544.
---
 grub-core/Makefile.am          |  2 --
 grub-core/kern/ieee1275/init.c | 43 ++++++++++--------------------------------
 include/grub/ieee1275/alloc.h  | 31 ------------------------------
 3 files changed, 10 insertions(+), 66 deletions(-)
 delete mode 100644 include/grub/ieee1275/alloc.h

diff --git a/grub-core/Makefile.am b/grub-core/Makefile.am
index f9d4aa2..4a14cc0 100644
--- a/grub-core/Makefile.am
+++ b/grub-core/Makefile.am
@@ -155,7 +155,6 @@ endif
 if COND_i386_ieee1275
 KERNEL_HEADER_FILES += $(top_builddir)/include/grub/machine/kernel.h
 KERNEL_HEADER_FILES += $(top_srcdir)/include/grub/ieee1275/ieee1275.h
-KERNEL_HEADER_FILES += $(top_srcdir)/include/grub/ieee1275/alloc.h
 KERNEL_HEADER_FILES += $(top_srcdir)/include/grub/terminfo.h
 KERNEL_HEADER_FILES += $(top_srcdir)/include/grub/extcmd.h
 KERNEL_HEADER_FILES += $(top_srcdir)/include/grub/lib/arg.h
@@ -243,7 +242,6 @@ endif
 
 if COND_powerpc_ieee1275
 KERNEL_HEADER_FILES += $(top_srcdir)/include/grub/ieee1275/ieee1275.h
-KERNEL_HEADER_FILES += $(top_srcdir)/include/grub/ieee1275/alloc.h
 KERNEL_HEADER_FILES += $(top_srcdir)/include/grub/terminfo.h
 KERNEL_HEADER_FILES += $(top_srcdir)/include/grub/extcmd.h
 KERNEL_HEADER_FILES += $(top_srcdir)/include/grub/lib/arg.h
diff --git a/grub-core/kern/ieee1275/init.c b/grub-core/kern/ieee1275/init.c
index e995fbf..5a83ab5 100644
--- a/grub-core/kern/ieee1275/init.c
+++ b/grub-core/kern/ieee1275/init.c
@@ -46,9 +46,6 @@
 #ifdef __sparc__
 #include <grub/machine/kernel.h>
 #endif
-#if defined(__powerpc__) || defined(__i386__)
-#include <grub/ieee1275/alloc.h>
-#endif
 
 /* The maximum heap size we're going to claim at boot. Not used by sparc. */
 #ifdef __i386__
@@ -333,9 +330,9 @@ count_free (grub_uint64_t addr, grub_uint64_t len, grub_memory_type_t type,
 
 static int
 regions_claim (grub_uint64_t addr, grub_uint64_t len, grub_memory_type_t type,
-	       void *data)
+	      unsigned int flags, void *data)
 {
-  struct regions_claim_request *rcr = data;
+  grub_uint32_t total = *(grub_uint32_t *) data;
   grub_uint64_t linux_rmo_save;
 
   if (type != GRUB_MEMORY_AVAILABLE)
@@ -515,11 +512,11 @@ regions_claim (grub_uint64_t addr, grub_uint64_t len, grub_memory_type_t type,
             }
         }
     }
-  if (rcr->flags & GRUB_MM_ADD_REGION_CONSECUTIVE && len < rcr->total)
+  if (flags & GRUB_MM_ADD_REGION_CONSECUTIVE && len < total)
     return 0;
 
-  if (len > rcr->total)
-    len = rcr->total;
+  if (len > total)
+    len = total;
 
   if (len)
     {
@@ -529,12 +526,12 @@ regions_claim (grub_uint64_t addr, grub_uint64_t len, grub_memory_type_t type,
       if (err)
 	return err;
       grub_mm_init_region ((void *) (grub_addr_t) addr, len);
-      rcr->total -= len;
+      total -= len;
     }
 
-  *(grub_uint32_t *) data = rcr->total;
+  *(grub_uint32_t *) data = total;
 
-  if (rcr->total == 0)
+  if (total == 0)
     return 1;
 
   return 0;
@@ -544,34 +541,14 @@ static int
 heap_init (grub_uint64_t addr, grub_uint64_t len, grub_memory_type_t type,
 	   void *data)
 {
-  struct regions_claim_request rcr = {
-    .flags = GRUB_MM_ADD_REGION_NONE,
-    .total = *(grub_uint32_t *) data,
-  };
-  int ret;
-
-  ret = regions_claim (addr, len, type, &rcr);
-
-  *(grub_uint32_t *) data = rcr.total;
-
-  return ret;
+  return regions_claim (addr, len, type, GRUB_MM_ADD_REGION_NONE, data);
 }
 
 static int
 region_claim (grub_uint64_t addr, grub_uint64_t len, grub_memory_type_t type,
 	   void *data)
 {
-  struct regions_claim_request rcr = {
-    .flags = GRUB_MM_ADD_REGION_CONSECUTIVE,
-    .total = *(grub_uint32_t *) data,
-  };
-  int ret;
-
-  ret = regions_claim (addr, len, type, &rcr);
-
-  *(grub_uint32_t *) data = rcr.total;
-
-  return ret;
+  return regions_claim (addr, len, type, GRUB_MM_ADD_REGION_CONSECUTIVE, data);
 }
 
 static grub_err_t
diff --git a/include/grub/ieee1275/alloc.h b/include/grub/ieee1275/alloc.h
deleted file mode 100644
index 12fade5..0000000
--- a/include/grub/ieee1275/alloc.h
+++ /dev/null
@@ -1,31 +0,0 @@
-/* alloc.h - Memory allocation for PowerVM, KVM on Power, and i386 */
-/*
- *  GRUB  --  GRand Unified Bootloader
- *  Copyright (C) 2023  Free Software Foundation, Inc.
- *  Copyright (C) 2023  IBM Corporation
- *
- *  GRUB is free software: you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation, either version 3 of the License, or
- *  (at your option) any later version.
- *
- *  GRUB is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with GRUB.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#ifndef GRUB_IEEE1275_ALLOC_HEADER
-#define GRUB_IEEE1275_ALLOC_HEADER	1
-
-#include <grub/memory.h>
-
-struct regions_claim_request {
-  unsigned int flags;     /* GRUB_MM_ADD_REGION_(NONE|CONSECUTIVE) */
-  grub_uint32_t total;    /* number of requested bytes */
-};
-
-#endif /* GRUB_IEEE1275_ALLOC_HEADER */
