From: Julian Andres Klode <julian.klode@canonical.com>
Date: Wed, 8 Apr 2020 11:05:25 +0200
Subject: UBUNTU: efivar: Correctly handle boot order of multiple ESPs

Modify the code to insert the ESP mounted to /boot/efi (the *primary*
ESP) as the first item, but any other ESP after any other of _our_
ESPs.

So assume we have three ESPs A, B, C (_ours_), and three other
boot entries X, Y, Z. We configure A, B, and C in that order,
though some might already be in it, some examples:

	XYZ -> ABCXYZ  (A is added to front, B after it, C after B)
	BXCYZ -> ABXCYZ (A is added to front, B and C remain unchanged)
	AXCYZ -> AXCBYZ  (the previously unconfigured ESP B is added after last ESP C)

Doing this requires us passing the path of the ESP directory down to
the code doing the install, so it can then check whether it was the
primary ESP - that is, mounted to /boot/efi - or not.

Patch-Name: ubuntu-resilient-boot-boot-order.patch
---
 grub-core/osdep/basic/no_platform.c |  2 +-
 grub-core/osdep/unix/efivar.c       | 48 ++++++++++++++++++++++++++++++++-----
 grub-core/osdep/unix/platform.c     |  6 ++---
 grub-core/osdep/windows/platform.c  |  2 +-
 include/grub/util/install.h         | 17 +++++++------
 util/grub-install.c                 |  8 +++----
 6 files changed, 59 insertions(+), 24 deletions(-)

diff --git a/grub-core/osdep/basic/no_platform.c b/grub-core/osdep/basic/no_platform.c
index d76c34c..152a328 100644
--- a/grub-core/osdep/basic/no_platform.c
+++ b/grub-core/osdep/basic/no_platform.c
@@ -31,7 +31,7 @@ grub_install_register_ieee1275 (int is_prep, const char *install_device,
 }
 
 void
-grub_install_register_efi (grub_device_t efidir_grub_dev,
+grub_install_register_efi (grub_device_t efidir_grub_dev, const char *efidir,
 			   const char *efifile_path,
 			   const char *efi_distributor)
 {
diff --git a/grub-core/osdep/unix/efivar.c b/grub-core/osdep/unix/efivar.c
index 41d39c4..d34df0f 100644
--- a/grub-core/osdep/unix/efivar.c
+++ b/grub-core/osdep/unix/efivar.c
@@ -266,9 +266,10 @@ remove_from_boot_order (struct efi_variable *order, uint16_t num)
 }
 
 static void
-add_to_boot_order (struct efi_variable *order, uint16_t num)
+add_to_boot_order (struct efi_variable *order, uint16_t num,
+		   uint16_t *alt_nums, size_t n_alt_nums, bool is_boot_efi)
 {
-  int i;
+  int i, j, position = -1;
   size_t new_data_size;
   uint8_t *new_data;
 
@@ -278,10 +279,36 @@ add_to_boot_order (struct efi_variable *order, uint16_t num)
     if (GET_ORDER (order->data, i) == num)
       return;
 
+  if (!is_boot_efi)
+    {
+      for (i = 0; i < order->data_size / sizeof (uint16_t); ++i)
+	for (j = 0; j < n_alt_nums; j++)
+	  if (GET_ORDER (order->data, i) == alt_nums[j])
+	    position = i;
+    }
+
   new_data_size = order->data_size + sizeof (uint16_t);
   new_data = xmalloc (new_data_size);
-  SET_ORDER (new_data, 0, num);
-  memcpy (new_data + sizeof (uint16_t), order->data, order->data_size);
+
+  if (position != -1)
+    {
+      /* So we should be inserting after something else, as we're not the
+	 preferred ESP. Could write this as memcpy(), but this is far more
+	 readable. */
+      for (i = 0; i <= position; ++i)
+	SET_ORDER (new_data, i, GET_ORDER (order->data, i));
+
+      SET_ORDER (new_data, position + 1, num);
+
+      for (i = position + 1; i < order->data_size / sizeof (uint16_t); ++i)
+	SET_ORDER (new_data, i + 1, GET_ORDER (order->data, i));
+    }
+  else
+    {
+      SET_ORDER (new_data, 0, num);
+      memcpy (new_data + sizeof (uint16_t), order->data, order->data_size);
+    }
+
   free (order->data);
   order->data = new_data;
   order->data_size = new_data_size;
@@ -486,7 +513,7 @@ devices_equal (const_efidp a, const_efidp b)
 
 int
 grub_install_efivar_register_efi (grub_device_t efidir_grub_dev,
-				  const char *efifile_path,
+				  const char *efidir, const char *efifile_path,
 				  const char *efi_distributor)
 {
   const char *efidir_disk;
@@ -496,8 +523,12 @@ grub_install_efivar_register_efi (grub_device_t efidir_grub_dev,
   efidp *alternatives;
   efidp this;
   int entry_num = -1;
+  uint16_t *alt_nums = NULL;
+  size_t n_alt_nums = 0;
   int rc;
+  bool is_boot_efi;
 
+  is_boot_efi = strstr (efidir, "/boot/efi") != NULL;
   efidir_disk = grub_util_biosdisk_get_osdev (efidir_grub_dev->disk);
   efidir_part = efidir_grub_dev->disk->partition ? efidir_grub_dev->disk->partition->number + 1 : 1;
   alternatives = get_alternative_esps ();
@@ -576,6 +607,10 @@ grub_install_efivar_register_efi (grub_device_t efidir_grub_dev,
 	    {
 	      grub_util_info ("not deleting alternative EFI variable %s (%s)",
 			      entry->name, label);
+
+	      alt_nums
+		  = xrealloc (alt_nums, (++n_alt_nums) * sizeof (*alt_nums));
+	      alt_nums[n_alt_nums - 1] = entry->num;
 	      continue;
 	    }
 	}
@@ -611,7 +646,8 @@ grub_install_efivar_register_efi (grub_device_t efidir_grub_dev,
   if (rc < 0)
     goto err;
 
-  add_to_boot_order (order, (uint16_t) entry_num);
+  add_to_boot_order (order, (uint16_t)entry_num, alt_nums, n_alt_nums,
+		     is_boot_efi);
 
   grub_util_info ("setting EFI variable BootOrder");
   rc = set_efi_variable ("BootOrder", order);
diff --git a/grub-core/osdep/unix/platform.c b/grub-core/osdep/unix/platform.c
index b561174..a5267db 100644
--- a/grub-core/osdep/unix/platform.c
+++ b/grub-core/osdep/unix/platform.c
@@ -76,13 +76,13 @@ get_ofpathname (const char *dev)
 }
 
 int
-grub_install_register_efi (grub_device_t efidir_grub_dev,
+grub_install_register_efi (grub_device_t efidir_grub_dev, const char *efidir,
 			   const char *efifile_path,
 			   const char *efi_distributor)
 {
 #ifdef HAVE_EFIVAR
-  return grub_install_efivar_register_efi (efidir_grub_dev, efifile_path,
-					   efi_distributor);
+  return grub_install_efivar_register_efi (efidir_grub_dev, efidir,
+					   efifile_path, efi_distributor);
 #else
   grub_util_error ("%s",
 		   _("GRUB was not built with efivar support; "
diff --git a/grub-core/osdep/windows/platform.c b/grub-core/osdep/windows/platform.c
index d18488f..b9bcaa2 100644
--- a/grub-core/osdep/windows/platform.c
+++ b/grub-core/osdep/windows/platform.c
@@ -208,7 +208,7 @@ set_efi_variable_bootn (grub_uint16_t n, void *in, grub_size_t len)
 }
 
 int
-grub_install_register_efi (grub_device_t efidir_grub_dev,
+grub_install_register_efi (grub_device_t efidir_grub_dev, const char *efidir,
 			   const char *efifile_path,
 			   const char *efi_distributor)
 {
diff --git a/include/grub/util/install.h b/include/grub/util/install.h
index 134b862..8f2faad 100644
--- a/include/grub/util/install.h
+++ b/include/grub/util/install.h
@@ -226,15 +226,14 @@ grub_install_get_default_x86_platform (void);
 const char *
 grub_install_get_default_powerpc_machtype (void);
 
-int
-grub_install_efivar_register_efi (grub_device_t efidir_grub_dev,
-				  const char *efifile_path,
-				  const char *efi_distributor);
-
-int
-grub_install_register_efi (grub_device_t efidir_grub_dev,
-			   const char *efifile_path,
-			   const char *efi_distributor);
+int grub_install_efivar_register_efi (grub_device_t efidir_grub_dev,
+				      const char *efidir,
+				      const char *efifile_path,
+				      const char *efi_distributor);
+
+int grub_install_register_efi (grub_device_t efidir_grub_dev,
+			       const char *efidir, const char *efifile_path,
+			       const char *efi_distributor);
 
 void
 grub_install_register_ieee1275 (int is_prep, const char *install_device,
diff --git a/util/grub-install.c b/util/grub-install.c
index 1196685..9e9c93d 100644
--- a/util/grub-install.c
+++ b/util/grub-install.c
@@ -2110,9 +2110,9 @@ main (int argc, char *argv[])
 	    {
 	      /* Try to make this image bootable using the EFI Boot Manager, if available.  */
 	      int ret;
-	      ret = grub_install_register_efi (efidir_grub_dev,
-					       "\\System\\Library\\CoreServices",
-					       efi_distributor);
+	      ret = grub_install_register_efi (
+		  efidir_grub_dev, efidir, "\\System\\Library\\CoreServices",
+		  efi_distributor);
 	      if (ret)
 	        grub_util_error (_("failed to register the EFI boot entry: %s"),
 				 strerror (ret));
@@ -2231,7 +2231,7 @@ main (int argc, char *argv[])
 			  efidir_grub_dev->disk->name,
 			  (part ? ",": ""), (part ? : ""));
 	  grub_free (part);
-	  ret = grub_install_register_efi (efidir_grub_dev,
+	  ret = grub_install_register_efi (efidir_grub_dev, efidir,
 					   efifile_path, efi_distributor);
 	  if (ret)
 	    grub_util_error (_("failed to register the EFI boot entry: %s"),
